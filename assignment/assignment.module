<?php

	/**
	 * @file
	 * Assignment entity module
	 */

	/*
	 * Implements hook_entity_info().
	 */
	function assignment_entity_info() {
	 	$assignment_info['assignment'] = array(
	 		'label' 			=> t('Assignment'),
	 		'base table'		=> 'assignment',
	 		'uri callback'		=> 'assignment_uri',
	 		'fieldable'			=> TRUE,
	 		'entity keys'		=> array('id' => 'aid'),
	 		'static cache'		=> TRUE,
	 		'bundles'			=> array(
	 			'assignment' => array(
	 				'label' => t('Assignment'),
	 				'admin' => array(
	 					'path' => 'admin/structure/assignment',
	 					'access arguments' => array('administer example entity')
	 				)
	 			)
	 		)
	 	);
	 	return $assignment_info;
	}

	/**
	 *  Implements hook_trigger_info()
	 */
	function assignment_trigger_info() {
		return array(
			'assignment' => array(
				'assignment_create' => array(
					'label' => t('After creating a new assignment')
				),
				'assignment_complete' => array(
					'label' => t('After completing an assignment')
				),
				'assignment_notification' => array(
					'label'	=> t('After running a daily cron')
				)
			)
		);
	}

	/**
	 *  Implements hook_views_api
	 */
	function assignment_views_api() {
		return array(
			'api' 	=> 3.0,
			'path'	=> drupal_get_path('module', 'assignment'));
	}

	/**
	 *  Implements hook_cron()
	 */
	function assignment_cron() {
		$cron_last = variable_get('cron_last', FALSE);

		if(date('mdY') <> date('mdY', $cron_last)) {
			// implement functionality that is ran daily
		}

	}

	/**
	 * Implements hook_permission().
	 */
	function assignment_permission() {
	 	return array(
	 		'administer assignments' => array(
	 			'title' 			=> t('Administer Assignments'),
	 			'restrict access' 	=> TRUE,
	 		),
	 		'view assignments' => array(
	 			'title'				=> t('View Assignments'),
	 		)
	 	);
	}

	/**
	 * Implements hook_menu().
	 */
	function assignment_menu() {


		// create a new assignment
		$items['node/%/assignments/create'] = array(
			'title'				=> 'Create Assignment',
			'page callback'		=> 'drupal_get_form',
			'page arguments'	=> array('assignment_form_create', 1),
			'access arguments'	=> array('administer assignments'),
			'type'				=> MENU_NORMAL_ITEM,
		);

		// edit an assignment
		$items['node/%/assignments/%assignment/edit'] = array(
			'title'				=> 'Edit Assignment',
			'page callback'		=> 'drupal_get_form',
			'page arguments'	=> array('assignment_form_edit', 3),
			'access arguments'	=> array('administer assignments'),
			'type'				=> MENU_NORMAL_ITEM,
		);

		// link to record data for a statistic
		$items['assignment/%assignment/record'] = array(
			'title'				=> 'Record Data',
			'page callback'		=> 'drupal_get_form',
			'page arguments'	=> array('assignment_form_record_data'),
			'access arguments'	=> array('administer assignments'),
			'type'				=> MENU_LOCAL_TASK,
		);

		$items['assignments/assignee/autocomplete'] = array(
			'page callback'		=> 'assignment_assignee_autocomplete',
			'access callback'	=> TRUE,
			'type'				=> MENU_CALLBACK,
		);

		$items['admin/config/system/assignment'] = array(
       'title' 			=> 'Assignment settings',
       'description' 		=> 'Configure the assignment module',
       'page callback'	 	=> 'drupal_get_form',
			 'page arguments'	=> array('assignment_admin'),
       'access arguments' 	=> array('access administration pages'),
       'type' 				=> MENU_NORMAL_ITEM,
			 'file'				=> 'assignment.admin.inc'
    );

    $items['ajax/flag-assignment'] = array(
      'page callback'     => 'assignment_flag_set_ajax',
      'access arguments'  => array('administer nodes'),
      'type'              => MENU_CALLBACK,
    );

	 	return $items;
	}

	/**
	 * Implements hook_load().
	 */
	function assignment_load($aid, $reset = FALSE) {
	 	$aids = (isset($aid) ? array($aid) : array());
	 	$assignment = assignment_load_multiple($aids, array(), $reset);
		return $assignment ? reset($assignment) : FALSE;
	}

	/**
	 * Loads multiple assignments.
	 */
	function assignment_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
		$entity = entity_load('assignment', $aids, $conditions, $reset);
		return $entity;
	}

	/**
	 * Implements hook_field_extra_fields()
	 */
	function assignment_field_extra_fields() {
		$return = array();
		$return['assignment']['assignment'] = array(
			'form' => array(
				'uid' => array(
					'label' 	=> t('User'),
					'weight'	=> 0,
				),
				'sid' => array(
					'label'		=> t('Statistic'),
					'weight'	=> 1,
				),
				'expire_date' => array(
					'label'		=> t('Expiration Date'),
					'weight'	=> 2,
				),
				'modified_date' => array(
					'label'		=> t('Modified Date'),
					'weight'	=> 3,
				),
				'complete' => array(
					'label'		=> t('Completed'),
					'weight'	=> 4,
				),
			),
		);

		return $return;
	}

	/**
	 * Create new assignment.
	 */
	function assignment_form_create($form, &$form_state, $sid) {

		$default = (object) array(
			'uid'			=> '',
			'sid'			=> $sid,
			'expire_date'	=> date('m/d/Y')
		);

		$form['uid'] = array(
			'#type'					=> 'textfield',
			'#title'				=> t('Assignee(s)'),
			'#description'			=> t('Comma seperated list of users and roles to assign to.'),
			'#autocomplete_path' 	=> 'assignments/assignee/autocomplete'
		);

		$form['expire_date'] = array(
			'#type'				=> 'textfield',
			'#title'			=> 'Expiration Date',
			'#description'			=> t('Date assignment will expire.'),
			'#default_value'	=> $default->expire_date,
			'#required'			=> TRUE
		);

		$node = node_load($sid);

		$form['sid'] = array(
			'#type'		=> 'value',
			'#value'	=> $default->sid
		);

    if (property_exists($node, 'field_assignment_properties')) {
      $items = $node->field_assignment_properties['und'];
      if (!empty($items)) {

        $property_types = module_invoke_all('assignment_property_types');

        foreach($items as $item) {
          $form[$item['key']] = $property_types[$item['type']]['field'];
          $form[$item['key']]['#title'] = $item['label'];
        }
      }

    }

		field_attach_form('assignment', $default, $form, $form_state);

		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
			'#type'		=> 'submit',
			'#value'	=> t('Create Assignment'),
			'#weight'	=> 4
		);

		$form['#after_build'] = array('assignment_form_js');

		return $form;
	}

	/**
	 * Add javascript library to include datepicker
	 */
	function assignment_form_js($form_element, &$form_state) {
		drupal_add_library('system', 'ui.datepicker');
		drupal_add_js("jQuery(function() { jQuery('#edit-expire-date').datepicker({dateFormat: 'mm/dd/yy', minDate: (new Date)});   });", "inline");
		return $form_element;
	}

	/**
	 * Submit create form
	 */
	function assignment_form_create_submit($form, &$form_state) {
		$assignment = (object) $form_state['values'];
		field_attach_submit('assignment', $assignment, $form, $form_state);
		field_attach_presave('assignment', $assignment);

		// set creation date
		$assignment->created = mktime();

		// retrieve unix timestamp
		$assignment->expire_date = strtotime($assignment->expire_date);

		// split up multiple assignees
		$assignees = explode(',', $assignment->uid);
		$users = array();

		// iterate through each assignee to verify its existance as a user
		foreach($assignees as $assignee) {
			$result = db_query("SELECT uid
								FROM {users}
								WHERE LOWER(name) = LOWER(:str)", array(':str' => trim($assignee)))->fetchField();
			if(!empty($result)) {
				array_push($users, $result);
			}
		}

		// iterate through each assignee to verify its existance as a role
		foreach($assignees as $assignee) {
			$results = db_query("SELECT uid
								FROM {role} AS r INNER JOIN {users_roles} AS ur ON ur.rid = r.rid
								WHERE LOWER(name) = LOWER(:str)", array(':str' => trim($assignee)));
			foreach($results as $result) {
				array_push($users, $result->uid);
			}
		}

		// get rid of duplicate users (case: user was specified and also exists within a particular role)
		$uids = array_unique($users);
		// save each assignment
		foreach($uids as $uid) {
			$assignment->aid = null;
			$assignment->uid = $uid;

			drupal_write_record('assignment', $assignment);
			module_invoke_all('assignment_insert', $assignment);
		}

    assignment_property_field_submit($form, $form_state);

		$form_state['redirect'] = "node/" . $assignment->sid . "/assignments";
	}

	/**
	 * Implements form for editing.
	 */
	function assignment_form_edit($form, &$form_state, $assignment = NULL) {
		$form['expire_date'] = array(
			'#type'				=> 'textfield',
			'#title'			=> 'Expiration Date',
			'#default_value'	=> date('m/d/Y', $assignment->expire_date),
			'#required'			=> TRUE
		);

		$node = node_load($assignment->sid);

		field_attach_form('assignment', (object) $assignment, $form, $form_state);

		$form['aid'] = array(
			'#type'		=> 'value',
			'#value'	=> $assignment->aid
		);

		$form['uid'] = array(
			'#type'		=> 'value',
			'#value'	=> $assignment->uid,
		);

		$form['sid'] = array(
			'#type'		=> 'value',
			'#value'	=> $assignment->sid
		);


    if (property_exists($node, 'field_assignment_properties')) {
      $items = $node->field_assignment_properties['und'];
      if (!empty($items)) {

        $property_types = module_invoke_all('assignment_property_types');

        $results = db_select('assignment_properties', 'ap')
                   ->fields('ap')
                   ->condition('assignment_id', $assignment->aid)
                   ->execute();
        while($result = $results->fetchAssoc()) {
          $defaults[$result['key']] = $result['value'];
        }

        foreach($items as $item) {
          $form[$item['key']] = $property_types[$item['type']]['field'];
          $form[$item['key']]['#title'] = $item['label'];
          if (isset($defaults[$item['key']])) {
            $form[$item['key']]['#default_value'] = $defaults[$item['key']];
          }
        }
      }

    }

		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
			'#type'		=> 'submit',
			'#value'	=> t('Update Assignment'),
			'#weight'	=> 4
		);

		$form['#after_build'] = array('assignment_form_js');

		return $form;
	}

	/**
	 * Submit edit form
	 */
	function assignment_form_edit_submit($form, &$form_state) {
		$assignment = (object) $form_state['values'];
		field_attach_submit('assignment', $assignment, $form, $form_state);
		field_attach_presave('assignment', $assignment);

		module_invoke_all('entity_presave', $assignment, 'assignment');

		$assignment->expire_date = strtotime($assignment->expire_date);

		drupal_write_record('assignment', $assignment, 'aid');
		field_attach_update('assignment', $assignment);

    assignment_property_field_submit($form, $form_state);

		module_invoke_all('assignment_update', $assignment);
		$form_state['redirect'] = "node/" . $assignment->sid . "/assignments";
	}

	/**
	 * Submit record data form
	 */
	function assignment_form_record_data_submit($form, &$form_state) {


		$form_state['redirect'] = "node/" . $edit->sid . "/assignments";
	}

	/**
	 * Autocomplete for a comma delimited list of users/roles
	 */
	function assignment_assignee_autocomplete($str = null) {
		$matches = array();
		$items = explode(',', $str);
		foreach($items as &$item) {
			$item = trim($item);
		}

		$item = array_pop($items);

		$result = db_query("SELECT name
							FROM {users}
							WHERE LOWER(name) LIKE LOWER(:str)", array(':str' => $item . '%'));
		foreach($result as $user) {
			if(count($items) > 0) {
				$matches[implode(", ", $items) . ", " . $user->name] = check_plain($user->name);
			} else {
				$matches[$user->name] = check_plain($user->name);
			}
		}

		$result = db_query("SELECT name
							FROM {role}
							WHERE LOWER(name) LIKE LOWER(:str)
									AND name != 'anonymous user'
									AND name != 'authenticated user'", array(':str' => $item . '%'));
		foreach($result as $role) {
			if(count($items) > 0) {
				$matches[implode(", ", $items) . ", " . $role->name] = check_plain($role->name);
			} else {
				$matches[$role->name] = check_plain($role->name);
			}
		}

		print drupal_json_encode($matches);
		exit();
	}

	/**
	 * Generate new assignment
	 */
	function assignment_generate_new_assignment($assignment_id) {

		$result = db_query("SELECT uid, sid, expire_date
							FROM {assignment}
							WHERE aid = :aid", array(':aid' => $assignment_id))->fetchObject();

		$stat = node_load($result->sid);
		$items = field_get_items('node', $stat, 'field_expiration_interval');

		// Abort if the stat has no expiration interval
		if (empty($items)) return;

		$assignment = new stdClass();
		$assignment->aid = null;
		$assignment->uid = $result->uid;
		$assignment->sid = $result->sid;
		$assignment->created = mktime();
		$assignment->expire_date = strtotime($items[0]['value'], $result->expire_date);

		if (property_exists($stat,'terms')) {
            $assignment->terms = $stat->terms;
		}

		drupal_write_record('assignment', $assignment);
		module_invoke_all('assignment_insert', $assignment);
	}

/**
 * Hook to handle successful submission of assignment data
 * @param $assignment_id
 */
function assignment_data_submitted($assignment_id) {

	$assignment->aid = $assignment_id;
  $assignment->complete = 1;
  $assignment->modified_date = mktime();
  drupal_write_record('assignment', $assignment, 'aid');

  assignment_generate_new_assignment($assignment_id);

}


/**
 * Get the flag for an assignment if one exists
 * @param $assignment_id
 */
function assignment_get_flag($assignment_id) {

  $flag = db_select('assignment_flag', 'af')
    ->fields('af')
    ->condition('assignment_id', $assignment_id)
    ->execute()->fetchAssoc();

  return ($flag) ? $flag : null;

}


/**
 * Function to set an assignment flag via ajax
 */
function assignment_flag_set_ajax() {

  if (!isset($_REQUEST['assignment_id'])) {
    print json_encode(array('error' => 'assignment_id required')); exit();
  }

  $flag = assignment_get_flag($_REQUEST['assignment_id']);

  if (isset($flag)) {

    // Update the flag
    db_update('assignment_flag')
      ->condition('assignment_id', $_REQUEST['assignment_id'])
      ->fields(array('comment' => isset($_REQUEST['comment']) ? $_REQUEST['comment'] : null))
      ->execute();

  } else {

    // Check if this assignment exists
    $assignment = assignment_load($_REQUEST['assignment_id']);
    if (!$assignment) {
      print json_encode(array('error' => "Assignment {$_REQUEST['assignment_id']} does not exist")); exit();
    }

    // Insert a new flag
    db_insert('assignment_flag')
      ->fields(array(
        'assignment_id' => $_REQUEST['assignment_id'],
        'comment' => isset($_REQUEST['comment']) ? $_REQUEST['comment'] : null
      ))->execute();

  }

  print json_encode(array('success' => true)); exit();

}


/**
 * Returns an array of property types that can be added to an assignment
 */
function assignment_assignment_property_types() {

  return array(
    'user_autocomplete' => array(
      'name' => t('User Autocomplete'),
      'field' => array(
        '#type' => 'textfield',
        '#autocomplete_path' => 'user/autocomplete',
        '#element_validate' => array('assignment_property_validate_user_autocomplete')
      )
    )
  );

}

/**
 * Save the information entered in an assignment property field
 */
function assignment_property_field_submit($form, $form_state) {

  $node = node_load($form_state['values']['sid']);
  if (property_exists($node, 'field_assignment_properties')) {
    $items = $node->field_assignment_properties['und'];
    if (!empty($items)) {
      foreach($items as $delta => $item) {
        $result = db_query("REPLACE INTO {assignment_properties} (`assignment_id`, `key`, `value`) VALUES (:a, :k, :v)",
          array(':a' => $form_state['values']['aid'],
                ':k' => $item['key'],
                ':v' => $form_state['values'][$item['key']]));
      }
    }
  }

}


function assignment_property_validate_user_autocomplete($form, &$form_state) {

  $query = db_select('users', 'u')->condition('name', $form['#value']);
  if (!$query->countQuery()->execute()->fetchField()) {
    form_set_error($form['#name'], t('Not a valid user'));
  }

}


/*****************************************************************************
 * Field Hooks                                                               *
 *****************************************************************************/

function assignment_field_info() {

  return array(
    'clarity_assignment_properties' => array(
      'label' => t('Assignment properties'),
      'description' => t('This field stores properties that can be defined on assignments'),
      'default_widget' => 'options_select',
      'default_formatter' => 'clarity_assignment_property_formatter'
    )
  );

}


function assignment_field_widget_info() {

  return array(
    'clarity_assignment_property_widget' => array(
      'label' => t('Assignment property widget'),
      'field types' => array('clarity_assignment_properties')
    )
  );

}


function assignment_field_widget_form(&$form, &$form_state, $field,
                                      $instance, $langcode, $items, $delta, $element) {

  switch($field['type']) {

    case 'clarity_assignment_properties':

      $item =& $items[$delta];

      $element += array('#type' => 'fieldset');
      $element['key'] = array(
        '#title' => t('Key'),
        '#description' => t('A machine-name for this property'),
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 128,
        '#default_value' => isset($item['key']) ? $item['key'] : null
      );
      $element['label'] = array(
        '#title' => t('Label'),
        '#description' => t('A human-readable name for this property'),
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 128,
        '#default_value' => isset($item['label']) ? $item['label'] : null
      );

      $options = array();
      foreach(module_invoke_all('assignment_property_types') as $key => $type) {
        $options[$key] = $type['name'];
      }

      $element['type'] = array(
        '#title' => t('Type'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($item['type']) ? $item['type'] : null
      );

      return $element;

  }

}


function assignment_field_validate($entity_type, $entity, $field,
                                   $instance, $langcode, $items, &$errors) {

  foreach($items as $delta1 => $item1) {
    foreach($items as $delta2 => $item2) {
      if (($delta1 == $delta2) || ($item1['key'] == null)) continue;
      if ($item1['key'] == $item2['key']) {
        $errors[$field['field_name']][$langcode][$delta2][] = array(
          'error' => t('Duplicate assignment property key')
        );
        return;
      }
    }
  }

}


function assignment_field_formatter_info() {

  return array(
      'clarity_assignment_property_formatter' => array(
          'label' => t('Assignment property formatter'),
          'field types' => array('clarity_assignment_property')
      )
  );

}


function assignment_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch($display['type']) {
    case 'clarity_assignment_property_formatter':
      $types = module_invoke_all('assignment_property_types');
      foreach($items as $delta=> $item) {
        if(isset($item['label'])) {
          $element[$delta]['#markup'] = '<span>' . $item['label'] . '</span> - ';
        }
        $element[$delta]['#markup'] .= '<span>' . $types[$item['type']]['name'] . '</span>';
      }
      break;
  }

  return $element;

}


function assignment_field_is_empty($item, $field) {
  switch($field['type']) {
    case 'clarity_assignment_properties':
      if ($item['key'] == null) return true;
      break;
  }
  return false;
}


