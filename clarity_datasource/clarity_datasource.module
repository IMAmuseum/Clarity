<?php
/**
 * @file
 * This module implements the core data source for the Clarity package.
 *
 * A data source presents an interface through which stat data can be submitted
 * by users for stats, and edited, deleted, or plotted on charts.
 *
 * Custom versions of this module can be implemented which poll external datasources.
 * By implementing the same hook interface, these custom modules can supply data to
 * charts.
 */

/*
 * Implementation of hook_help
 */
function clarity_datasource_help($path, $arg) {

  switch($path) {
    case 'admin/help#clarity_datasource':
      return '<p>' . t("Implements the core data source for the Clarity package.") . '</p>';
      break;
  }

}

/*
 * Implementation of hook_menu
 */
function clarity_datasource_menu() {

  $items = array();

  $items['admin/config/datasources/dashboard'] = array(
    'title' => t('Clarity Datasource'),
    'description' => t('The core datasource for the dashboard'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clarity_datasource_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}


/**
 * Configuration form hook
 */
function clarity_datasource_config_form($form, &$form_state) {

}

/*****************************************************************************
 * Datasource support for categories                                         *
 *****************************************************************************/

function clarity_datasource_form_alter(&$form, &$form_state, $form_id) {

  if (substr($form_id, 0, 15) == 'assignment_form') {
    TaxonomyCategory::assignmentFormFields($form, $form_state, $form_id);
  }

}

function clarity_datasource_entity_presave($entity, $type) {

  if ($type != 'assignment') return;

  // remove all previously selected terms
  $result = db_query("DELETE FROM {assignment_terms}
                      WHERE aid = :aid", array(':aid' => $entity->aid));

}

function clarity_datasource_assignment_update($assignment) {

  if(isset($assignment->terms)) {
      foreach($assignment->terms as $term) {
          $assignment_terms = new stdClass();
          $assignment_terms->aid = $assignment->aid;
          $assignment_terms->tid = $term;
          drupal_write_record('assignment_terms', $assignment_terms);
      }
  }

}


/**
 * Add category information when an assignment is created
 */
function clarity_datasource_assignment_insert($assignment) {

  if(isset($assignment->terms)) {
    foreach($assignment->terms as $term) {
      $assignment_terms = new stdClass();
      $assignment_terms->aid = $assignment->aid;
      $assignment_terms->tid = $term;
      drupal_write_record('assignment_terms', $assignment_terms);
    }
  }

}


/**
 * Load category terms into assignments
 */
function clarity_datasource_entity_load($entities, $type) {

  if ($type != 'assignment') return;

  foreach ($entities as $assignment) {
    $result = db_query("SELECT tid
                        FROM {assignment_terms}
                        WHERE aid = :aid", array(':aid' => $assignment->aid));
    $terms = array();
    foreach($result as $row) {
        array_push($terms, $row->tid);
    }
    $assignment->terms = $terms;
  }

}




