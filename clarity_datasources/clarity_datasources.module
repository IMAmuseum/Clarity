<?php

/**
 * hook_menu
 */
function clarity_datasources_menu() {

  $items = array();

  $items['submit-data/%'] = array(
    'title'             => 'Data submission form',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('clarity_datasources_submit_data_form', 1),
    'access arguments'  => array('access content'),
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['datasource'] = array(
    'title'             => 'Datasources',
    'page callback'     => 'clarity_datasources_page',
    'access arguments'  => array('access content'),
    'type'              => MENU_NORMAL_ITEM,
  );


  $items['datasource/wire'] = array(
    'title'             => 'Wire protocol access',
    'page callback'     => 'clarity_datasources_wire',
    'file'              => 'clarity_datasources.wire.inc',
    'access arguments'  => array('access content'),
    'type'              => MENU_CALLBACK,
  );


  $items['node/%node/data'] = array(
    'title'             => 'Statistic Data',
    'page callback'     => 'clarity_datasources_display_stat_data',
    'page arguments'    => array(1),
    'access callback'   => 'clarity_datasources_stat_data_access',
    'access arguments'  => array(1, 'administer assignments'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2
  );

  $items['node/%node/datasource-config'] = array(
    'title'             => 'Datasource Configuration',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('clarity_datasources_stat_config_form', 1),
    'access callback'   => 'clarity_datasources_stat_data_access',
    'access arguments'  => array(1, 'administer assignments'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2
  );

  return $items;

}


/**
 * Only show the data tab on statistic nodes for users who have access
 * @param unknown_type $node
 * @param unknown_type $access
 */
function clarity_datasources_stat_data_access($node, $access) {

  if ($node->type != 'statistic') return false;
  return user_access($access);

}


/**
 * List the currently active datasources
 */
function clarity_datasources_page() {

    $datasources = _clarity_datasources_get_datasources();
    $content = '';

    foreach ($datasources as $ds) {
      $content .= "<p>{$ds->label}</p>";
    }

    return $content;

}


/**
 * Render the data submission form for the given assignment. Invokes
 * a form render via the datasource for the associated statistic.
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $assignment_id
 */
function clarity_datasources_submit_data_form($form, &$form_state, $assignment_id) {

  $assignment = assignment_load($assignment_id);

  $stat = node_load($assignment->sid);

  $content = 'Statistic: ' . l($stat->title, 'node/' . $stat->nid);

  $content = t('Please submit data for ') . date('n/d/Y', $assignment->expire_date);
  $form['assignment'] = array (
    '#prefix' => "<div>$content</div>",
    '#type' => 'value',
    '#value' => $assignment
  );

  $ds_info = _clarity_datasources_get_datasource($stat->field_datasource['und'][0]['dsid']);
  $form['datasource'] = array (
    '#type' => 'value',
    '#value' => $ds_info
  );

  $ds = new $ds_info->class;
  $form['data_fields'] = $ds->getDataFormFields($stat);
  $form['data_fields']['#type'] = 'fieldset';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  unset($ds);

  return $form;

}


function clarity_datasources_stat_config_form($form, &$form_state, $stat) {
  $ds_info = _clarity_datasources_get_datasource_for_stat($stat->nid);
  $form['datasource'] = array (
    '#type' => 'value',
    '#value' => $ds_info
  );

  $ds = new $ds_info->class;

  if ($ds instanceof DatasourceStatIfc) {

    $form['data_fields'] = $ds->getStatConfigFormFields($stat);
    $form['data_fields']['#type'] = 'fieldset';

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;

}


function clarity_datasources_stat_config_form_validate($form, &$form_state) {

  $ds = new $form['datasource']['#value']->class;
  if ($ds instanceof DatasourceStatIfc) {
    $ds->validateStatConfigForm($form, $form_state);
  }
  unset($ds);

}


/**
 * Form validation for the submit_data form
 * @param $form
 * @param $form_state
 */
function clarity_datasources_submit_data_form_validate($form, &$form_state) {

  $ds = new $form['datasource']['#value']->class;
  $ds->validateDataForm($form, $form_state);
  unset($ds);

}


/**
 * Form submission for the submit_data form
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function clarity_datasources_submit_data_form_submit($form, &$form_state) {

  // Pass form values to the appropriate datasource
  $ds = new $form['datasource']['#value']->class;
  $ds->submitDataForm($form, $form_state);
  unset($ds);

  // Tell the assignment module that this assignment is complete
  module_invoke('assignment', 'data_submitted', $form_state['values']['assignment']->aid);
  global $user;
  $form_state['redirect'] = "user/{$user->uid}/assignments";

}


function clarity_datasources_create_datasource($module, $class, $label, $data = null) {

  if (!module_exists($module)) {
    watchdog('clarity_datasources',
             'module parameter must be an existing module', null, WATCHDOG_ERROR);
    return;
  }

  if (!is_string($class)) {
    watchdog('clarity_datasources',
             'class parameter must be a string', null, WATCHDOG_ERROR);
    return;
  }

  $result = db_query("SELECT * FROM {clarity_datasource} WHERE module = '$module' and class = '$class'");
  $results = $result->fetchAll();
  if (!empty($results)) {
    watchdog('clarity_datasources',
             "datasource $class already exists for $module", null, WATCHDOG_WARNING);
    return;
  }

  if (!is_string($label)) {
    watchdog('clarity_datasources',
             'label parameter must be a string', null, WATCHDOG_ERROR);
    return;
  }

  $datasource = array(
    'type' => 'clarity_datasource',
    'module' => $module,
    'class' => $class,
    'label' => $label
  );

  if (!is_null($data) && !is_array($data)) {
    watchdog('clarity_datasources',
             'data parameter must be an array if given, setting to null', null, WATCHDOG_WARNING);
    $data = null;
  }

  if (!is_null($data)) $datasource['data'] = $data;

  $obj = (object)$datasource;

  drupal_write_record('clarity_datasource', $obj);

}


/**
 * Remove the datasource associated with the given class from the index.
 */
function clarity_datasources_remove_datasource($class) {

  db_query("DELETE FROM {clarity_datasource} WHERE class = '$class'");

}


function clarity_datasources_display_stat_data($stat) {

  if ($stat->type != 'statistic') return t('No data');

  $ds_info = _clarity_datasources_get_datasource_for_stat($stat->nid);
  if (!isset($ds_info)) {
    return t('No datasource assigned');
  }
  $data_table = call_user_func($ds_info->class . '::createDataTable', $stat->nid);

  return $data_table;

}


/*****************************************************************************
 * Database interface                                                        *
 *****************************************************************************/

function _clarity_datasources_get_datasources() {

  $results = db_query('SELECT * FROM {clarity_datasource}');

  if (!$results->rowCount()) return array();

  foreach ($results as $result) {
    $datasources[] = $result;
  }
  return $datasources;

}


function _clarity_datasources_get_datasource($dsid) {

  if (!is_numeric($dsid)) return null;

  $results = db_query("SELECT * FROM {clarity_datasource} WHERE dsid = $dsid");
  if (empty($results)) return null;
  foreach ($results as $result) return $result;

}


function _clarity_datasources_get_datasource_for_stat($stat_id) {

  $stat = node_load($stat_id);
  if (!isset($stat->field_datasource) || !count($stat->field_datasource)) return null;
  return _clarity_datasources_get_datasource($stat->field_datasource['und'][0]['dsid']);

}


/*****************************************************************************
 * Assignment Hooks                                                          *
 *****************************************************************************/


function clarity_datasources_form_alter(&$form, &$form_state, $form_id) {

  if (substr($form_id, 0, 15) == 'assignment_form') {

    $ds_info = _clarity_datasources_get_datasource_for_stat($form['sid']['#value']);
    $ds = new $ds_info->class;

    if ($ds instanceof DatasourceAssignmentIfc) {
      $ds->assignmentFormFields($form, $form_state, $form_id);
    }

    unset($ds);

  }

}


function clarity_datasources_entity_load($entities, $type) {

  if ($type != 'assignment') return;

  // Sort so that we can make one call per datasource
  $ds_sorted = array();
  foreach ($entities as $assignment) {
    $ds_info = _clarity_datasources_get_datasource_for_stat($assignment->sid);
    $ds_sorted[$ds_info->class][] = $assignment;
  }

  foreach($ds_sorted as $class => $entities) {

    $ds = new $class;
    if ($ds instanceof DatasourceAssignmentIfc) {
      $ds->onAssignmentLoad($entities);
    }
    unset($ds);

  }

}


function clarity_datasources_entity_presave($entity, $type) {

  if ($type != 'assignment') return;

  $ds_info = _clarity_datasources_get_datasource_for_stat($entity->sid);
  $ds = new $ds_info->class;
  if ($ds instanceof DatasourceAssignmentIfc) {
    $ds->onAssignmentPresave($entity);
  }

  unset($ds);

}


function clarity_datasources_assignment_update($assignment) {

  $ds_info = _clarity_datasources_get_datasource_for_stat($assignment->sid);
  $ds = new $ds_info->class;
  if ($ds instanceof DatasourceAssignmentIfc) {
    $ds->onAssignmentUpdate($assignment);
  }

  unset($ds);

}


function clarity_datasources_assignment_insert($assignment) {

  $ds_info = _clarity_datasources_get_datasource_for_stat($assignment->sid);
  $ds = new $ds_info->class;
  if ($ds instanceof DatasourceAssignmentIfc) {
    $ds->onAssignmentInsert($assignment);
  }

  unset($ds);

}

/*****************************************************************************
 * Field Hooks                                                               *
 *****************************************************************************/

function clarity_datasources_field_info() {

  return array(
    'clarity_datasource_reference' => array(
      'label' => t('Datasource reference'),
      'description' => t('This field stores a reference to a datasource.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'clarity_datasource_formatter',
    )
  );

}


function clarity_datasources_field_formatter_info() {

  return array(
      'clarity_datasource_formatter' => array(
          'label' => t('Datasource formatter'),
          'field types' => array('clarity_datasource_reference'),
      ),
  );

}


function clarity_datasources_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch($display['type']) {
    case 'clarity_datasource_formatter':
      foreach($items as $delta => $item) {
        if ($item['dsid']) {
          $ds = _clarity_datasources_get_datasource($item['dsid']);
          if (is_null($ds)) {
            $element[$delta]['#markup'] = '<span>' . t('None') . '</span>';
          } else {
            $element[$delta]['#markup'] = '<span>' . $ds->label . '</span>';
          }
        }
      }
  }

  return $element;

}


function clarity_datasources_field_widget_info_alter(&$info) {

  $info['options_select']['field types'][] = 'clarity_datasource_reference';
  $info['options_buttons']['field types'][] = 'clarity_datasource_reference';

}


function clarity_datasources_options_list($field) {

  $datasources = _clarity_datasources_get_datasources();
  foreach($datasources as $datasource) {
    $options[$datasource->dsid] = $datasource->label;
  }
  return $options;

}


function clarity_datasources_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}


function clarity_datasources_field_is_empty($item, $field) {
  return false;
}

