<?php

/**
 * hook_menu
 */
function clarity_datasources_menu() {

  $items = array();

  $items['submit-data/%'] = array(
    'title'             => 'Data submission form',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('clarity_datasources_submit_data_form', 1),
    'access arguments'  => array('access content'),
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['datasource'] = array(
    'title'             => 'Datasources',
    'page callback'     => 'clarity_datasources_page',
    'access arguments'  => array('access content'),
    'type'              => MENU_NORMAL_ITEM,
  );


  $items['datasource/wire'] = array(
    'title'             => 'Wire protocol access',
    'page callback'     => 'clarity_datasources_wire',
    'file'              => 'clarity_datasources.wire.inc',
    'access arguments'  => array('access content'),
    'type'              => MENU_CALLBACK,
  );


  $items['node/%node/assignments'] = array(
    'title'             => 'Assignments',
    'page callback'     => 'clarity_datasources_display_stat_data',
    'page arguments'    => array(1),
    'access callback'   => 'clarity_datasources_stat_data_access',
    'access arguments'  => array(1, 'administer assignments'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2
  );

  $items['node/%node/datasource-config'] = array(
    'title'             => 'Datasource Configuration',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('clarity_datasources_stat_config_form', 1),
    'access callback'   => 'clarity_datasources_stat_data_access',
    'access arguments'  => array(1, 'administer assignments'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2
  );

  return $items;

}


/**
 * Only show the data tab on statistic nodes for users who have access
 * @param unknown_type $node
 * @param unknown_type $access
 */
function clarity_datasources_stat_data_access($node, $access) {

  if ($node->type != 'statistic') return false;
  return user_access($access);

}


/**
 * List the currently active datasources
 */
function clarity_datasources_page() {

    $datasources = _clarity_datasources_get_datasources();
    $content = '';

    foreach ($datasources as $ds) {
      $content .= "<p>{$ds->label}</p>";
    }

    return $content;

}


/**
 * Implementation of hook_theme
 */
function clarity_datasources_theme() {

  return array(
    'stat_data_table' => array(
      'template' => 'stat_data_table',
      'file' => 'clarity_datasources.templates.inc',
      'arguments' => array(
        'stat_nid' => null,
        'options' => array()
      )
    ),
    'stat_data_table_header' => array(
      'template' => 'stat_data_table_header',
      'file' => 'clarity_datasources.templates.inc',
      'arguments' => array(
        'ds_header_labels' => array()
      )
    ),
    'stat_data_table_row' => array(
      'template' => 'stat_data_table_row',
      'file' => 'clarity_datasources.templates.inc',
      'arguments' => array(
        'assignment' => null,
        'ds_column_content' => array()
      )
    )
  );

}


/**
 * Implementation of hook_node_view
 * @todo Consider how to make this configurable
 *
function clarity_datasources_node_view($node, $view_mode, $langcode) {


  if ($node->type != 'statistic') return;

  if ($view_mode != '') {

    $datasources = _clarity_datasources_get_datasources_for_stat($node->nid);

    foreach ($datasources as $delta => $ds) {

      $content = call_user_func_array($ds->class . '::getLatestValueContent',
                                      array($node->nid, $delta));

      $node->content["latest-$delta"] = array(
        '#markup' => "<div id='latest-value-$delta'>$content</div>",
        '#weight' => $delta-20
      );

      unset($ds['object']);

    }

  }

}
*/

/**
 * Render the data submission form for the given assignment. Invokes
 * a form render via the datasource for the associated statistic.
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $assignment_id
 */
function clarity_datasources_submit_data_form($form, &$form_state, $assignment_id) {

  $assignment = assignment_load($assignment_id);

  $stat = node_load($assignment->sid);

  $content = 'Statistic: ' . l($stat->title, 'node/' . $stat->nid);

  $content = t('Please submit data for ') . date('n/d/Y', $assignment->expire_date);
  $form['assignment'] = array (
    '#prefix' => "<div>$content</div>",
    '#type' => 'value',
    '#value' => $assignment
  );

  $form['stat-title'] = array(
    '#type' => 'item',
    '#markup' => "<h2>{$stat->title}</h2>",
    '#weight' => '-2'
  );

  $form['stat-body'] = array(
    '#type' => 'item',
    '#markup' => $stat->body['und'][0]['value'],
    '#weight' => '-1'
  );

  $form['datasources'] = array('#tree' => 'true');

  foreach ($stat->field_datasources['und'] as $delta => $ds) {

    $ds_info = _clarity_datasources_get_datasource($ds['dsid']);

    $form['datasources'][$ds['index']] = array(
      '#type' => 'fieldset',
      '#tree' => 'true'
    );

    if (isset($ds['label'])) {
      $form['datasources'][$ds['index']]['#title'] = $ds['label'];
    }

    $form['datasources'][$ds['index']]['info'] = array (
      '#type' => 'value',
      '#value' => $ds_info
    );

    $form['datasources'][$ds['index']]['data_fields'] = call_user_func_array($ds_info->class . '::getDataFormFields', array($stat, $ds['index'], $assignment_id));

    if (!empty($ds['config']['instruction'])) {
      $form['datasources'][$ds['index']]['instruction'] = array(
        '#type' => 'item',
        '#markup' => $ds['config']['instruction'],
        '#weight' => -1
      );
    }

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );


  return $form;

}


/**
 * Form validation for the submit_data form
 * @param $form
 * @param $form_state
 */
function clarity_datasources_submit_data_form_validate($form, &$form_state) {

  foreach($form_state['values']['datasources'] as $index => $ds_fieldset) {

    _clarity_datasources_call_if_implemented($ds_fieldset['info']->class,
                                             'DatasourceIfc',
                                             'validateDataFormFields',
                                             array("datasources][$index][data_fields][",
                                                   $ds_fieldset['data_fields'],
                                                   $index));

  }

}


/**
 * Form submission for the submit_data form
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function clarity_datasources_submit_data_form_submit($form, &$form_state) {

  foreach($form_state['values']['datasources'] as $index => $ds_fieldset) {

    _clarity_datasources_call_if_implemented($ds_fieldset['info']->class,
                                             'DatasourceIfc',
                                             'submitDataFormFields',
                                             array($ds_fieldset['data_fields'],
                                                   $form_state['values']['assignment']->aid,
                                                   $index));

  }

  if (!$form_state['values']['assignment']->complete) {
    // Tell the assignment module that this assignment is complete
    module_invoke('assignment', 'data_submitted', $form_state['values']['assignment']->aid);
    global $user;
    $form_state['redirect'] = "user/{$user->uid}/assignments";
  } else {
    db_update('assignment')
    ->condition('aid', $form_state['values']['assignment']->aid, '=')
    ->fields(array('modified_date' => mktime()))
    ->execute();
    $form_state['redirect'] = "node/{$form_state['values']['assignment']->sid}/assignments";
  }


}


function clarity_datasources_stat_config_form($form, &$form_state, $stat) {

  $ds_info = _clarity_datasources_get_datasources_for_stat($stat->nid);

  $form['stat_nid'] = array (
    '#type' => 'value',
    '#value' => $stat->nid
  );

  $form['datasources'] = array (
    '#type' => 'value',
    '#value' => $ds_info
  );

  foreach($ds_info as $index => $info) {

    $delta = _clarity_datasources_delta_for_index($stat, $index);

    if (in_array('DatasourceStatIfc', class_implements($info->class))) {

      $result = db_select('clarity_datasource_stat_config', 'c')
        ->fields('c')
        ->condition('stat_id', $stat->nid, '=')
        ->condition('field_index', $index)
        ->execute()->fetchAssoc();
      $config = unserialize($result['config']);

      $form["datasource-$index"] = call_user_func_array($info->class . '::getStatConfigFormFields', array($stat));
      $form["datasource-$index"]['#type'] = 'fieldset';

      $form["datasource-$index"]['#title'] = '';
      if (isset($stat->field_datasources['und'][$delta]['label'])) {
        $form["datasource-$index"]['#title'] .= $stat->field_datasources['und'][$delta]['label'] . ' - ';
      }
      $form["datasource-$index"]['#title'] .= $info->label;

      $form["datasource-$index"]['#tree'] = true;

      $form["datasource-$index"]['instruction'] = array(
        '#type' => 'textarea',
        '#description' => t('Instructions for this field'),
        '#weight' => -1
      );

      if (isset($config) && ($config != null)) {
        foreach($config as $key => $val) {
          $form["datasource-$index"][$key]['#default_value'] = $val;
        }
      }

    }

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;

}


function clarity_datasources_stat_config_form_validate($form, &$form_state) {

  $validated_classes = array();
  foreach($form['datasources']['#value'] as $index => $info) {

    if (in_array($info->class, $validated_classes)) continue;

    _clarity_datasources_call_if_implemented($info->class,
                                             'DatasourceStatIfc',
                                             'validateStatConfigForm',
                                             array($form_state['values']['datasource-' . $index]));

    $validated_classes[] = $info->class;

  }

}

function clarity_datasources_stat_config_form_submit($form, &$form_state) {

  db_delete('clarity_datasource_stat_config')->condition('stat_id', $form['stat_nid']['#value'])->execute();

  foreach($form['datasources']['#value'] as $index => $info) {

    $config = array();
    foreach($form_state['complete form']["datasource-$index"] as $key => $val) {
      if ($key[0] != '#') {
        $config[$key] = $val['#value'];
      }
    }

    db_insert('clarity_datasource_stat_config')->fields(array(
      'stat_id' => $form['stat_nid']['#value'],
      'field_index' => $index,
      'config' => serialize($config)
    ))->execute();

  }

  drupal_set_message(t('Configuration saved.'));

}


/**
 * Add a datasource to the index.
 * @param string $module The name of the module responsible for the datasource
 * @param string $class  The class name for the datasource
 * @param string $label  The human-readable label for the datasource
 * @param array $data    An array of data to be stored in the index
 */
function clarity_datasources_create_datasource($module, $class, $label, $data = null) {

  if (!module_exists($module)) {
    watchdog('clarity_datasources',
             'module parameter must be an existing module', null, WATCHDOG_ERROR);
    return;
  }

  if (!is_string($class)) {
    watchdog('clarity_datasources',
             'class parameter must be a string', null, WATCHDOG_ERROR);
    return;
  }

  $result = db_query("SELECT * FROM {clarity_datasource} WHERE module = '$module' and class = '$class'");
  $results = $result->fetchAll();
  if (!empty($results)) {
    watchdog('clarity_datasources',
             "datasource $class already exists for $module", null, WATCHDOG_WARNING);
    return;
  }

  if (!is_string($label)) {
    watchdog('clarity_datasources',
             'label parameter must be a string', null, WATCHDOG_ERROR);
    return;
  }

  $datasource = array(
    'type' => 'clarity_datasource',
    'module' => $module,
    'class' => $class,
    'label' => $label
  );

  if (!is_null($data) && !is_array($data)) {
    watchdog('clarity_datasources',
             'data parameter must be an array if given, setting to null', null, WATCHDOG_WARNING);
    $data = null;
  }

  if (!is_null($data)) $datasource['data'] = $data;

  $obj = (object)$datasource;

  drupal_write_record('clarity_datasource', $obj);

}


/**
 * Remove the datasource associated with the given class from the index.
 */
function clarity_datasources_remove_datasource($class) {

  db_query("DELETE FROM {clarity_datasource} WHERE class = '$class'");

}


/**
 * A callback to display the data for a statistic
 * @param node $stat
 */
function clarity_datasources_display_stat_data($stat) {

  if ($stat->type != 'statistic') return t('No data');

  /*
  $ds_info = _clarity_datasources_get_datasource_for_stat($stat->nid);
  if (!isset($ds_info)) {
    return t('No datasource assigned');
  }
  $data_table = call_user_func($ds_info->class . '::createDataTable', $stat->nid);
  */

  drupal_add_css(drupal_get_path('module', 'clarity_datasources') . '/clarity_datasources.css');


  $content  = l(t('Create Assignment'), "node/{$stat->nid}/assignments/create");
  $content .= theme('stat_data_table', array('stat_nid' => $stat->nid));

  return $content;

}


/*****************************************************************************
 * Database interface                                                        *
 *****************************************************************************/

/**
 * Returns a list of all datasources
 */
function _clarity_datasources_get_datasources() {

  $results = db_query('SELECT * FROM {clarity_datasource}');

  if (!$results->rowCount()) return array();

  foreach ($results as $result) {
    $datasources[] = $result;
  }
  return $datasources;

}


/**
 * Returns the datasource with the given id.
 * @param uint $dsid A datasource id
 */
function _clarity_datasources_get_datasource($ds_id) {

  if (!is_numeric($ds_id)) return null;

  $results = db_query("SELECT * FROM {clarity_datasource} WHERE dsid = $ds_id");
  if (empty($results)) return null;
  foreach ($results as $result) return $result;

}


/**
 * Returns the datasource for the given stat
 * TODO: handle multiple datasources per stat
 * @param uint $stat_id The stat id
 */
function _clarity_datasources_get_datasource_for_stat($stat_id) {

  $stat = node_load($stat_id);
  if (!isset($stat->field_datasource) || !count($stat->field_datasource)) return null;
  return _clarity_datasources_get_datasource($stat->field_datasource['und'][0]['dsid']);

}

function _clarity_datasources_get_datasources_for_stat($stat_id) {

  $stat = node_load($stat_id);
  if (!isset($stat->field_datasources) || !count($stat->field_datasources)) return array();

  $result = array();
  foreach ($stat->field_datasources['und'] as $delta => $item) {
    $result[$item['index']] = _clarity_datasources_get_datasource($item['dsid']);
  }

  return $result;

}


function _clarity_datasources_call_if_implemented($class, $ifc, $func, $args) {

  if (in_array($ifc, class_implements($class))) {
    return call_user_func_array($class . '::' . $func, $args);
  };

}


function _clarity_datasources_delta_for_index($stat, $index) {

  foreach($stat->field_datasources['und'] as $delta => $item) {
    if ($item['index'] == $index) return $delta;
  }

  return null;

}


/*****************************************************************************
 * Assignment Hooks                                                          *
 *****************************************************************************/


function clarity_datasources_form_alter(&$form, &$form_state, $form_id) {

  if (substr($form_id, 0, 15) == 'assignment_form') {

    $datasources = _clarity_datasources_get_datasources_for_stat($form['sid']['#value']);
    $ds_objs = array();
    foreach ($datasources as $index => $ds_info) {
      _clarity_datasources_call_if_implemented($ds_info->class,
                                               'DatasourceAssignmentIfc',
                                               'assignmentFormFields',
                                               array($form, $form_state, $form_id));
    }

    foreach ($ds_objs as $obj) unset($obj);

  }

}


function clarity_datasources_entity_load($entities, $type) {

  switch($type) {

    case 'assignment':

      // Sort so that we can make one call per datasource
      $ds_sorted = array();
      $ds_aids = array();
      foreach ($entities as $assignment) {
        $datasources = _clarity_datasources_get_datasources_for_stat($assignment->sid);
        foreach ($datasources as $ds_info) {
          if (isset($ds_aids[$ds_info->class]) && in_array($assignment->aid, $ds_aids[$ds_info->class])) continue;
          $ds_aids[$ds_info->class][] = $assignment->aid;
          $ds_sorted[$ds_info->class][] = $assignment;
        }
      }

      foreach($ds_sorted as $class => $entities) {

        _clarity_datasources_call_if_implemented($ds_info->class,
                                                 'DatasourceAssignmentIfc',
                                                 'onAssignmentLoad',
                                                 array($entities));

      }

      break;

    case 'node':

      foreach ($entities as $node) {
        if ($node->type != 'statistic') continue;
        if (!isset($node->field_datasources['und'])) continue;
        foreach ($node->field_datasources['und'] as $delta => &$item) {
          $result = db_select('clarity_datasource_stat_config', 'c')
            ->fields('c')
            ->condition('stat_id', $node->nid, '=')
            ->condition('field_index', $item['index'], '=')
            ->execute()->fetchAssoc();
          $item['config'] = unserialize($result['config']);
        }
      }

      break;

  }

}


function clarity_datasources_entity_presave($entity, $type) {

  if ($type != 'assignment') return;

  $datasources = _clarity_datasources_get_datasources_for_stat($entity->sid);
  $ds_objs = array();
  foreach ($datasources as $index => $ds_info) {

    _clarity_datasources_call_if_implemented($ds_info->class,
                                             'DatasourceAssignmentIfc',
                                             'onAssignmentPresave',
                                             array($entity));

  }

  foreach ($ds_objs as $obj) unset($obj);

}


function clarity_datasources_assignment_update($assignment) {

  $datasources = _clarity_datasources_get_datasources_for_stat($assignment->sid);
  $ds_objs = array();
  foreach ($datasources as $index => $ds_info) {

    _clarity_datasources_call_if_implemented($ds_info->class,
                                             'DatasourceAssignmentIfc',
                                             'onAssignmentUpdate',
                                             array($assignment));

  }

  foreach ($ds_objs as $obj) unset($obj);

}


function clarity_datasources_assignment_insert($assignment) {

  $datasources = _clarity_datasources_get_datasources_for_stat($assignment->sid);
  $ds_objs = array();
  foreach ($datasources as $index => $ds_info) {

    _clarity_datasources_call_if_implemented($ds_info->class,
                                             'DatasourceAssignmentIfc',
                                             'onAssignmentInsert',
                                             array($assignment));

  }

  foreach ($ds_objs as $obj) unset($obj);

}

/*****************************************************************************
 * Field Hooks                                                               *
 *****************************************************************************/

function clarity_datasources_field_info() {

  return array(
    'clarity_datasource_reference' => array(
      'label' => t('Datasource reference'),
      'description' => t('This field stores a reference to a datasource.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'clarity_datasource_formatter',
    )
  );

}


function clarity_datasources_field_widget_info() {

  return array(
      'clarity_datasource_widget' => array(
          'label' => t('Datasource widget'),
          'field types' => array('clarity_datasource_reference'),
      ),
  );

}


function clarity_datasources_field_widget_form(&$form, &$form_state, $field,
                                               $instance, $langcode, $items, $delta, $element) {

  $field_name = $instance['field_name'];
  $fieldset_info = element_info('fieldset');
  $required = $element['#required'];
  $item =& $items[$delta];

  $opts = clarity_datasources_options_list($field);
  $opts[null] = t('None');

  $element += array('#type' => 'fieldset');

  $element['label'] = array(
    '#title' => t('Label'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($item['label']) ? $item['label'] : null
  );

  $element['dsid'] = array(
    '#title' => t('Datasource'),
    '#type' => 'select',
    '#options' => $opts,
    '#default_value' => isset($item['dsid']) ? $item['dsid'] : null
  );

  $keys = array_keys($items);
  $element['index'] = array(
    '#type' => 'value',
    '#value' => isset($item['index']) ? $item['index'] : $keys[count($items)-1]
  );

  return $element;

}


function clarity_datasources_field_validate($entity_type, $entity, $field,
                                            $instance, $langcode, $items, &$errors) {

  // TODO: If the number of datasources has changed, warn that the data will be blown away

}


function clarity_datasources_field_formatter_info() {

  return array(
      'clarity_datasource_formatter' => array(
          'label' => t('Datasource formatter'),
          'field types' => array('clarity_datasource_reference'),
      ),
  );

}


function clarity_datasources_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  switch($display['type']) {
    case 'clarity_datasource_formatter':
      foreach($items as $delta => $item) {
        if (isset($item['dsid'])) {
          $ds = _clarity_datasources_get_datasource($item['dsid']);
          if (is_null($ds)) {
            $element[$delta]['#markup'] = '<span>' . t('None') . '</span>';
          } else {
            $element[$delta]['#markup'] = '';
            if(isset($item['label'])) {
              $element[$delta]['#markup'] = '<span>' . $item['label'] . '</span> - ';
            }
            $element[$delta]['#markup'] .= '<span>' . $ds->label . '</span>';
          }
        }
      }
  }

  return $element;

}


function clarity_datasources_field_widget_info_alter(&$info) {

  $info['options_select']['field types'][] = 'clarity_datasource_reference';
  $info['options_buttons']['field types'][] = 'clarity_datasource_reference';

}


function clarity_datasources_options_list($field) {

  $datasources = _clarity_datasources_get_datasources();
  foreach($datasources as $datasource) {
    $options[$datasource->dsid] = $datasource->label;
  }
  return $options;

}


function clarity_datasources_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}


function clarity_datasources_field_is_empty($item, $field) {
  if ($item['dsid'] == null) return true;
  return false;
}

