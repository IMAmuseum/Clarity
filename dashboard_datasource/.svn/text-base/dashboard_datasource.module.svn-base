<?php
/**
 * @file
 * This module implements the core data source for the Dashboard package.
 *
 * A data source presents an interface through which stat data can be submitted
 * by users for stats, and edited, deleted, or plotted on charts.
 *
 * Custom versions of this module can be implemented which poll external datasources.
 * By implementing the same hook interface, these custom modules can supply data to
 * charts.
 */



/*
 * Implementation of hook_help
 */
function dashboard_datasource_help($path, $arg) {

  switch($path) {
    case 'admin/help#dashboard_datasource':
      return '<p>' . t("Implements the core data source for the Dashboard package.") . '</p>';
      break;
  }

}

/*
 * Implementation of hook_menu
 */
function dashboard_datasource_menu() {

  $items = array();

  $items['admin/config/datasources/dashboard'] = array(
    'title' => t('Dashboard Datasource'),
    'description' => t('The core datasource for the dashboard'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dashboard_datasource_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}


/**
 * Configuration form hook
 */
function dashboard_datasource_config_form($form, &$form_state) {

}


/*****************************************************************************
 * Dashboard Datasource API hooks                                            *
 *****************************************************************************/


/**
 * apihook_submit_data_form_fields
 * Define the fields that make up the data submission form
 * @param unknown_type $stat
 */
function dashboard_datasource_submit_data_form_fields($stat) {

  $fields['single-value'] = array(
    '#type' => 'textfield',
    '#title' => t('Value'),
    '#description' => $stat->field_unit['und'][0]['value'],
    '#required' => true
  );

  $fields['annotation'] = array(
    '#type' => 'textfield',
    '#title' => t('Annotation'),
    '#description' => t('An optional annotation for this entry')
  );

  return $fields;

}


/**
 * apihook_submit_data_form_validate
 * This hook validates the data provided in the form
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function dashboard_datasource_submit_data_form_validate($form, $form_state) {

  if (!is_numeric($form_state['values']['single-value'])) {
    form_set_error('single-value', t('Please enter a numeric value'));
  }

}


/**
 * apihook_submit_data_form_submit
 * This hook is called when data is ready to be entered in the database
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function dashboard_datasource_submit_data_form_submit($form, $form_state) {

  global $user;

  try {

    $result = db_insert('dashboard_value_single_float')->fields(array(
      'stat_nid'      => $form_state['values']['assignment']->sid,
      'uid'           => $user->uid,
      'timestamp'     => $form_state['values']['assignment']->expire_date,
      'value'         => $form_state['values']['single-value'],
      'annotation'    => $form_state['values']['annotation'],
      'modified_time' => time()
    ))->execute();

  } catch (PDOException $e) {

    watchdog_exception('data_submission', $e);
    if (($e->errorInfo[0] == 23000) && $e->errorInfo[1] == 1062) {
      drupal_set_message(t('An entry for this assignment already exists'), 'warning');
    } else {
      drupal_set_message(t('The system was unable to record this value'), 'warning');
    }

  }

}


